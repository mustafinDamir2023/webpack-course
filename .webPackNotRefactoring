import path from 'path';
import webpack from 'webpack';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import MiniCssExtractPlugin from 'mini-css-extract-plugin';
import type { Configuration as DevServerConfiguration } from "webpack-dev-server";

type Mode = 'production' | 'development'

interface EnvVariable {
  mode: Mode;
  port?: number;
}

export default (env: EnvVariable) => {

  const isDev = env.mode === 'development'
  const isProd = env.mode === 'production'

  const config : webpack.Configuration = 
   { mode: env.mode ?? 'development',
    entry: path.resolve(__dirname, 'src', 'index.tsx'),
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: '[name].[contenthash].js',
        clean: true,
    },
      plugins: [new HtmlWebpackPlugin({ template: path.resolve(__dirname, 'public', 'index.html') }),
      // медленный процесс
       isDev && new webpack.ProgressPlugin(),
       new MiniCssExtractPlugin(),
    ].filter(Boolean),
    module: {
      // ts-loader умеет работать с JSX
      // если не использовать тайпскрипт: нужен bable-loader
        rules: [
          // порядок имеет значение
          {
            test: /\.s[ac]ss$/i,
            use: [
              // Creates `style` nodes from JS strings
              isProd ? 'style-loader': MiniCssExtractPlugin.loader,
              // Translates CSS into CommonJS
              "css-loader",
              // Compiles Sass to CSS
              "sass-loader",
            ]
          },
          {
            test: /\.tsx?$/,
            use: 'ts-loader',
            exclude: /node_modules/,
          },
        ],
      },
      resolve: {
        extensions: ['.tsx', '.ts', '.js'],
      },
      devtool: isDev ? 'inline-source-map': false,
      devServer: isDev? {
         port: env.port ?? 3000,
         open: true,
      }: undefined,
    }
    return config
}